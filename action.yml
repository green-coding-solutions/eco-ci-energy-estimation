name: 'Eco CI Energy Estimation'
description: 'Estimate the energy of Linux Github Actions Runner VMs via ML Model'

branding:
  icon: "battery-charging"
  color: "green"

inputs:
  task:
    description: 'Task to be executed (start-measurement, get-measurement, display-results)'
    required: true
  branch:
    description: 'Used to correctly identify this CI run for the Badge. Uses github.ref_name by default'
    default: ${{ github.ref_name }}
    required: false
  label:
    description: 'Label for the get-measurement task, to mark what this measurement correlates to in your workflow'
    default: null
    required: false
  machine-power-data:
    description: 'The file to read the machine power data from. Default will be 4 core AMD EPYC 7763 Github Runner'
    default: "github_EPYC_7763_4_CPU_shared.sh"
    required: false
  send-data:
    description: 'Send metrics data to dashboard (default: metrics.green-coding.io) to create and display badge, and see an overview of the energy of your CI runs. Set to false to send no data.'
    default: true
    required: false
  display-table:
    description: 'Show the energy reading results in a table during display-results step'
    default: true
    required: false
  display-badge:
    description: 'Shows the badge for the ci run during display-results step'
    default: true
    required: false
  pr-comment:
    description: 'Add a comment to the PR with the results during display-results step'
    default: false
    required: false
  json-output:
    description: 'Output measurement data also as JSON artifacts'
    default: false
    required: false
  gh-api-base:
      description: 'Base URL of the Github API to send data to (including schema). Default is "github.api_url" (which resolves to https://api.github.com in free and many enterprise setups), but can be changed to your hostname if you have a custom hosted Github Enterprise'
      default: ${{ github.api_url }}
      required: false
  type:
      description: 'If you want filter data in the GMT Dashboard or in CarbonDB you can here manually set a type for drill-down later. Defaults to "machine.ci"'
      default: 'machine.ci'
      required: false
  project:
      description: 'If you want filter data in the GMT Dashboard or in CarbonDB you can here manually set a project for drill-down later. Defaults to "CI/CD"'
      default: 'CI/CD'
      required: false
  machine:
      description: 'If you want filter data in the GMT Dashboard or in CarbonDB you can here manually set a machine for drill-down later. Defaults to ubuntu-latest'
      default: 'ubuntu-latest'
      required: false
  tags:
      description: 'If you want filter data in the GMT Dashboard or in CarbonDB you can here manually set tags for drill-down later. Please supply comma separated. Tags cannot have commas itself or contain quotes. Defaults to empty'
      default: ''
      required: false
  gmt-api-token:
      description: 'If you are not using the default user for the GMT API supply your auth token. We recommend to have this as a GitHub Secret'
      default: ''
      required: false
  api-endpoint-add:
      description: 'When using the GMT Dashboard and / or CarbonDB specify the endpoint URL to send to. Defaults to "https://api.green-coding.io/v2/ci/measurement/add"'
      default: 'https://api.green-coding.io/v2/ci/measurement/add'
      required: false
  api-endpoint-badge-get:
      description: 'When using the GMT Dashboard and / or CarbonDB specify the endpoint URL to get the badge from to. Defaults to "https://api.green-coding.io/v1/ci/badge/get'
      default: 'https://api.green-coding.io/v1/ci/badge/get'
      required: false
  dashboard-url:
      description: 'The URL for the GMT Dashboard. Punch in yours if self-hosted. Defaults to "https://metrics.green-coding.io"'
      default: 'https://metrics.green-coding.io'
      required: false
  co2-calculation-method:
    description: 'CO2 calculation can be a constant and will use a supplied fixed grid intensity. Or it can also be location based where it will use a grid intensity API provider to determine the carbon intensity value of the current machine IP.'
    default: 'constant'
    required: false
  co2-grid-intensity-constant:
    description: "Constant value to be used to calculate the CO2 from the estimated energy. We use the worldwide average value from Ember compiled by The Green Web Foundation from https://github.com/thegreenwebfoundation/co2.js/blob/main/data/output/average-intensities.json#L1314 as default and update it annually."
    default: 472
    required: false
  co2-grid-intensity-api-token:
      description: 'API token for the API of your choice regarding the grid intensity. See documentation for details'
      default: ''
      required: false

outputs:
  data-total-json:
    description: "Contains the data of the total measurement which is retrieved by the 'display-results' task."
    value: ${{ steps.run-total-model.outputs.data-total-json }}
  data-lap-json:
    description: "Contains the data of the most recent measurement which is retrieved by the 'get-measurement' task."
    value: ${{ steps.run-lap-model.outputs.data-lap-json }}
runs:
  using: 'composite'
  steps:
    - id: guard
      if: inputs.task != 'start-measurement' && inputs.task != 'get-measurement' && inputs.task != 'display-results'
      shell: bash
      run: |
          echo 'Please call the Eco CI Energy Estimation with a valid task name: start-measurement, get-measurement, or display-results' >> $GITHUB_STEP_SUMMARY
          echo "Eco CI task was called with ${{inputs.task}} instead" >> $GITHUB_STEP_SUMMARY
          fail('Invalid task name specified')

    - id: start-measurement
      if: inputs.task == 'start-measurement'
      name: Starting measurement
      shell: bash
      run: |
        workflow_id="${{github.workflow}}"
        workflow_name="${{github.workflow}}"

        if ${{inputs.send-data}}; then
          workflow_id=$(curl -s -H "Authorization: Bearer ${{github.token}}" ${{ inputs.gh-api-base }}/repos/${{ github.repository }}/actions/runs/${{ github.run_id }} | jq -r .workflow_id)
        fi

        workflow_id=${workflow_id:-"not_set"}
        workflow_name=${workflow_name:-"not_set"}

        ${{github.action_path}}/scripts/setup.sh start_measurement "${{inputs.machine-power-data}}" "${{ github.run_id }}" "${{inputs.branch}}" "${{ github.repository }}" "$workflow_id" "$workflow_name" "${{ github.sha }}" "github" "${{ inputs.send-data }}" "${{ inputs.type }}" "${{ inputs.project }}" "${{ inputs.machine }}" "${{ inputs.tags }}" "${{ inputs.co2-calculation-method }}" "${{ inputs.co2-grid-intensity-constant }}" "${{ inputs.co2-grid-intensity-api-token }}" "${{ inputs.gmt-api-token }}" "${{ inputs.json-output }}" "${{ inputs.api-endpoint-add }}" "${{ inputs.api-endpoint-badge-get }}" "${{ inputs.dashboard-url }}"

    - if:  inputs.task == 'get-measurement'
      id: run-lap-model
      name: Running estimation model
      env:
        NAME: ${{ github.workflow }}
      shell: bash
      run: |
        label='${{ contains(inputs.label, '"') && 'No quotes allowed in labels' || inputs.label }}'
        label_cleaned=$(echo "$label" | tr -d "$&;\'")
        echo "Cleaned label: $label_cleaned"
        "${{ github.action_path }}/scripts/make_measurement.sh" make_measurement "$label_cleaned"
        data_file="/tmp/test.bash"
        lap_data_file="/tmp/eco-ci/lap-data.json"
        if [[ -e $lap_data_file ]]; then
          echo "data-lap-json=$(cat $lap_data_file)" >> $GITHUB_OUTPUT
        fi
    - if: inputs.task == 'display-results'
      name: get estimation for total energy
      id: run-total-model
      shell: bash
      run: |
        ${{github.action_path}}/scripts/display_results.sh display_results "${{inputs.display-table}}" "${{inputs.display-badge}}"
        cat "/tmp/eco-ci/output.txt" >> $GITHUB_STEP_SUMMARY
        total_data_file="/tmp/eco-ci/total-data.json"
        if [[ -e $total_data_file ]]; then
          echo "data-total-json=$(cat $total_data_file)" >> $GITHUB_OUTPUT
        fi
        echo "Checking if PR comment is needed"
        echo "inputs.pr-comment: ${{ inputs.pr-comment }}"
        echo "github.event_name: ${{ github.event_name }}"


    - if: inputs.task == 'display-results' && inputs.pr-comment == 'true' && github.event_name == 'pull_request'
      name: Minimize Old Comment and Post New Comment
      id: pr-comment
      shell: bash
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
        RUN_ID: ${{ github.run_id }}
      run: |
        echo 'Running PR-Comment task'
        COMMENTS=$(curl -s -H  "Authorization: Bearer ${{github.token}}" "${{ inputs.gh-api-base }}/repos/${{ github.repository }}/issues/$PR_NUMBER/comments")

        echo "$COMMENTS" | jq -c --arg username "github-actions[bot]" '.[] | select(.user.login == $username)' | while read -r comment; do

            COMMENT_ID=$(echo "$comment" | jq -r '.id')
            COMMENT_BODY=$(echo "$comment" | jq -r '.body')

            if [[ "$COMMENT_BODY" != *"Eco CI Output [RUN-ID:"* ]]; then
              echo 'Skipping non Eco CI comment'
              continue
            fi

            if [[ "$COMMENT_BODY" == *"Eco CI Output - Old Energy Estimation"* ]]; then
              echo 'Skipping already collapsed Eco CI comment'
              continue
            fi
            if [[ "$COMMENT_BODY" == *"Eco CI Output [RUN-ID: ${RUN_ID}]:"* ]]; then
              echo 'Skipping Eco CI comment from same RUN-ID'
              continue
            fi

            ## indentation here is important, otherwise newlines are not properly sent/processed
            PAYLOAD=$(jq --null-input --arg body "<details><summary>Eco CI Output - Old Energy Estimation</summary>

        $COMMENT_BODY

        </details>" '{"body": $body}')
            curl -s -H "Authorization: Bearer ${{github.token}}" -X PATCH -d "$PAYLOAD" "${{ inputs.gh-api-base }}/repos/${{ github.repository }}/issues/comments/$COMMENT_ID"
            echo "Comment $COMMENT_ID collapsed."
        done

        NEW_COMMENT=$(cat "/tmp/eco-ci/output-pr.txt" | jq -Rs '.')
        API_URL="${{ inputs.gh-api-base }}/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
        curl -X POST -H "Authorization: Bearer ${{github.token}}" -d @- $API_URL <<EOF
        {
          "body": $NEW_COMMENT
        }
        EOF
